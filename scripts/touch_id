#!/usr/local/munkireport/munkireport-python3

import os
import subprocess
import sys
import plistlib
import platform
import re

def get_system_prints():
                
    # Get all Touch ID fingerprints
    cmd = ['/usr/bin/bioutil', '-sc']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()

    # This text is different for different versions of macOS
    if "There are no ":
        return "No fingerprints"
    else:

        fingerprints = ""

        for user in output.decode("utf-8", errors="ignore").split('\n'):
            if 'fingerprint' in user:

                fingerprint_array=user.split(":")
                user_id=re.sub('\D', '', fingerprint_array[0])
                finderprint_count=re.sub('\D', '', fingerprint_array[1])

                cmd = ['/usr/bin/id', '-un', user_id]
                proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                (username, unused_error) = proc.communicate()
                username = username.decode("utf-8", errors="ignore")

                if "1" in finderprint_count:
                    fingerprint = username[:-1]+" (" + user_id + ") - " + finderprint_count + " fingerprint"
                else:
                    fingerprint = username[:-1]+" (" + user_id + ") - " + finderprint_count + " fingerprints"

                fingerprints = fingerprint + "\n" + fingerprints
            
    return fingerprints[:-1]

def getTouchIDConfig():

    # Get Touch ID configuration
    cmd = ['/usr/bin/bioutil', '-rs']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()

    # Check if we have Touch ID, this text is different for different versions of macOS
    if " for unlock" not in output.decode("utf-8", errors="ignore"):
        return "No Touch ID"
    else:
        config = {}
        for line in output.decode("utf-8", errors="ignore").split('\n'):

            if 'Touch ID functionality: 1' in line or 'Biometrics functionality: 1' in line:
                config['enabled'] = 1
            elif 'Touch ID functionality: 0' in line or 'Biometrics functionality: 0' in line:
                config['enabled'] = 0
            elif 'Touch ID for unlock: 1' in line or 'Biometrics for unlock: 1' in line:
                config['unlock'] = 1
            elif 'Touch ID unlock: 0' in line or 'Biometrics for unlock: 0' in line:
                config['unlock'] = 0
            elif 'Touch ID timeout ' in line or 'Biometric timeout ' in line:
                config['timeout']=re.sub('\D', '', line)
            elif 'Match timeout ' in line:
                config['match_timeout']=re.sub('\D', '', line)
            elif 'Passcode input timeout ' in line:
                config['passcode_input_timeout']=re.sub('\D', '', line)

        return config

def getDarwinVersion():
    """Returns the Darwin version."""
    # Catalina -> 10.15.7 -> 19.6.0 -> 19
    darwin_version_tuple = platform.release().split('.')
    return int(darwin_version_tuple[0])

def main():
    """Main"""

    if getDarwinVersion() < 17:
        # Sierra (Darwin 16) and older are not supported by Touch ID
        print("Touch ID not supported on this version of macOS!")

        # Write blank cache file
        result = dict()
        cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
        output_plist = os.path.join(cachedir, 'touch_id.plist')
        try:
            plistlib.writePlist(result, output_plist)
        except:
            with open(output_plist, 'wb') as fp:
                plistlib.dump(result, fp, fmt=plistlib.FMT_XML)
    else:

        touchid_config = getTouchIDConfig()

        # Check if the Mac has Touch ID
        if "No Touch ID" in touchid_config:

            # Write blank cache file
            result = dict()
            cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
            output_plist = os.path.join(cachedir, 'touch_id.plist')
            try:
                plistlib.writePlist(result, output_plist)
            except:
                with open(output_plist, 'wb') as fp:
                    plistlib.dump(result, fp, fmt=plistlib.FMT_XML)

        else:

            # Get information about Touch ID
            result = touchid_config
            result.update({'fingerprints':get_system_prints()})
            
            # Write Touch ID results to cache
            cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
            output_plist = os.path.join(cachedir, 'touch_id.plist')
            try:
                plistlib.writePlist(result, output_plist)
            except:
                with open(output_plist, 'wb') as fp:
                    plistlib.dump(result, fp, fmt=plistlib.FMT_XML)
            # print plistlib.writePlistToString(result)


if __name__ == "__main__":
    main()
